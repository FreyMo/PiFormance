//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26919.1
// 
namespace PiFormance.Client.Connected_Services.Cpu {
	using System.Runtime.Serialization;

	[System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="CpuSample", Namespace="http://schemas.datacontract.org/2004/07/PiFormance.Services.CpuRelated")]
    public partial class CpuSample : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Frequency ClockSpeedField;
        
        private System.Collections.ObjectModel.ObservableCollection<Core> CoresField;
        
        [DataMember()]
        public Frequency ClockSpeed {
            get {
                return this.ClockSpeedField;
            }
            set {
                if ((object.ReferenceEquals(this.ClockSpeedField, value) != true)) {
                    this.ClockSpeedField = value;
                    this.RaisePropertyChanged("ClockSpeed");
                }
            }
        }
        
        [DataMember()]
        public System.Collections.ObjectModel.ObservableCollection<Core> Cores {
            get {
                return this.CoresField;
            }
            set {
                if ((object.ReferenceEquals(this.CoresField, value) != true)) {
                    this.CoresField = value;
                    this.RaisePropertyChanged("Cores");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Frequency", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.FrequencyQuantity")]
    public partial class Frequency : PhysicalQuantityOfFrequency9McGUATy {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Core", Namespace="http://schemas.datacontract.org/2004/07/PiFormance.Services.CpuRelated")]
    public partial class Core : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private Ratio LoadField;
        
        private Temperature TemperatureField;
        
        [DataMember()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public Ratio Load {
            get {
                return this.LoadField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadField, value) != true)) {
                    this.LoadField = value;
                    this.RaisePropertyChanged("Load");
                }
            }
        }
        
        [DataMember()]
        public Temperature Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((object.ReferenceEquals(this.TemperatureField, value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Bindable", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Notification")]
    [KnownType(typeof(PhysicalQuantityOfRatioP6CKV5DK))]
    [KnownType(typeof(Ratio))]
    [KnownType(typeof(PhysicalQuantityOfTemperaturemklq4rKt))]
    [KnownType(typeof(Temperature))]
    [KnownType(typeof(PhysicalQuantityOfMemory_STgboZd0))]
    [KnownType(typeof(Memory))]
    [KnownType(typeof(PhysicalQuantityOfFrequency9McGUATy))]
    [KnownType(typeof(Frequency))]
    public partial class Bindable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<string, object> _propertyFieldDictionaryField;
        
        [DataMember(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, object> _propertyFieldDictionary {
            get {
                return this._propertyFieldDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this._propertyFieldDictionaryField, value) != true)) {
                    this._propertyFieldDictionaryField = value;
                    this.RaisePropertyChanged("_propertyFieldDictionary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PhysicalQuantityOfRatioP6CKV5DK", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.Definitions")]
    [KnownType(typeof(Ratio))]
    public partial class PhysicalQuantityOfRatioP6CKV5DK : Bindable {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Ratio", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.RatioQuantity")]
    public partial class Ratio : PhysicalQuantityOfRatioP6CKV5DK {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PhysicalQuantityOfTemperaturemklq4rKt", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.Definitions")]
    [KnownType(typeof(Temperature))]
    public partial class PhysicalQuantityOfTemperaturemklq4rKt : Bindable {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Temperature", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.TemperatureQuantit" +
        "y")]
    public partial class Temperature : PhysicalQuantityOfTemperaturemklq4rKt {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PhysicalQuantityOfMemory_STgboZd0", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.Definitions")]
    [KnownType(typeof(Memory))]
    public partial class PhysicalQuantityOfMemory_STgboZd0 : Bindable {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Memory", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.MemoryQuantity")]
    public partial class Memory : PhysicalQuantityOfMemory_STgboZd0 {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PhysicalQuantityOfFrequency9McGUATy", Namespace="http://schemas.datacontract.org/2004/07/Core.Common.Quantities.Definitions")]
    [KnownType(typeof(Frequency))]
    public partial class PhysicalQuantityOfFrequency9McGUATy : Bindable {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="RamSample", Namespace="http://schemas.datacontract.org/2004/07/PiFormance.Services.CpuRelated")]
    public partial class RamSample : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Memory AvailableMemoryField;
        
        private Memory TotalMemoryField;
        
        private Ratio UsageField;
        
        [DataMember()]
        public Memory AvailableMemory {
            get {
                return this.AvailableMemoryField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableMemoryField, value) != true)) {
                    this.AvailableMemoryField = value;
                    this.RaisePropertyChanged("AvailableMemory");
                }
            }
        }
        
        [DataMember()]
        public Memory TotalMemory {
            get {
                return this.TotalMemoryField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalMemoryField, value) != true)) {
                    this.TotalMemoryField = value;
                    this.RaisePropertyChanged("TotalMemory");
                }
            }
        }
        
        [DataMember()]
        public Ratio Usage {
            get {
                return this.UsageField;
            }
            set {
                if ((object.ReferenceEquals(this.UsageField, value) != true)) {
                    this.UsageField = value;
                    this.RaisePropertyChanged("Usage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Cpu.ICpuService", CallbackContract=typeof(ICpuServiceCallback))]
    public interface ICpuService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBaseOf_ICpuCallback/Acknowledge")]
        System.Threading.Tasks.Task AcknowledgeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICpuServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICpuService/CpuChanged")]
        void CpuChanged(CpuSample cpuSample);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICpuService/RamUsageChanged")]
        void RamUsageChanged(RamSample ramSample);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICpuServiceChannel : ICpuService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CpuServiceClientBase : System.ServiceModel.DuplexClientBase<ICpuService>, ICpuService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CpuServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, CpuServiceClientBase.GetDefaultBinding(), CpuServiceClientBase.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ICpuService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CpuServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, CpuServiceClientBase.GetBindingForEndpoint(endpointConfiguration), CpuServiceClientBase.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CpuServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, CpuServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CpuServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, CpuServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CpuServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task AcknowledgeAsync() {
            return base.Channel.AcknowledgeAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICpuService)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICpuService)) {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:8733/PiFormance/"), new System.ServiceModel.DnsEndpointIdentity("localhost"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return CpuServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ICpuService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return CpuServiceClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ICpuService);
        }
        
        public enum EndpointConfiguration {
            
            NetTcpBinding_ICpuService,
        }
    }
    
    public class CpuChangedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CpuChangedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CpuSample cpuSample {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CpuSample)(this.results[0]));
            }
        }
    }
    
    public class RamUsageChangedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RamUsageChangedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RamSample ramSample {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RamSample)(this.results[0]));
            }
        }
    }
    
    public partial class CpuServiceClient : CpuServiceClientBase {
        
        public CpuServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new CpuServiceClientCallback(), endpointConfiguration) {
        }
        
        private CpuServiceClient(CpuServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration) {
            callbackImpl.Initialize(this);
        }
        
        public CpuServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new CpuServiceClientCallback(), binding, remoteAddress) {
        }
        
        private CpuServiceClient(CpuServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            callbackImpl.Initialize(this);
        }
        
        public CpuServiceClient() : 
                this(new CpuServiceClientCallback()) {
        }
        
        private CpuServiceClient(CpuServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl)) {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<CpuChangedReceivedEventArgs> CpuChangedReceived;
        
        public event System.EventHandler<RamUsageChangedReceivedEventArgs> RamUsageChangedReceived;
        
        private void OnCpuChangedReceived(object state) {
            if ((this.CpuChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.CpuChangedReceived(this, new CpuChangedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRamUsageChangedReceived(object state) {
            if ((this.RamUsageChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.RamUsageChangedReceived(this, new RamUsageChangedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class CpuServiceClientCallback : object, ICpuServiceCallback {
            
            private CpuServiceClient proxy;
            
            public void Initialize(CpuServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void CpuChanged(CpuSample cpuSample) {
                this.proxy.OnCpuChangedReceived(new object[] {
                            cpuSample});
            }
            
            public void RamUsageChanged(RamSample ramSample) {
                this.proxy.OnRamUsageChangedReceived(new object[] {
                            ramSample});
            }
        }
    }
}
